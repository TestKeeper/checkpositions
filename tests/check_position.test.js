// @ts-check
import { test, expect } from '@playwright/test';
import { getValidRefreshToken } from './utils/tokenManager.js';

const tradingPairs = [
  '1000BONK_USD'
];

const directions = ['Short', 'Long'];

test.describe('üöÄ –¢–µ—Å—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π (–ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º)', () => {
  for (const pair of tradingPairs) {
    for (const direction of directions) {
      test(`üîÅ ${pair}: ${direction} –ø–æ–∑–∏—Ü–∏—è: –æ—Ç–∫—Ä—ã—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å`, async ({ page }) => {
        try {
          const username = 'mrcheck_1';
          let refreshToken = await getValidRefreshToken(username);
          let debugUrl = `https://app.upscale.stormtrade.dev/debug/${refreshToken}`;

          try {
            console.log('üü¢ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ debug-—Å—Å—ã–ª–∫–µ:', debugUrl);
            await page.goto(debugUrl, { waitUntil: 'domcontentloaded', timeout: 60000 });
          } catch {
            refreshToken = await getValidRefreshToken(username);
            debugUrl = `https://app.upscale.stormtrade.dev/debug/${refreshToken}`;
            await page.goto(debugUrl, { waitUntil: 'domcontentloaded', timeout: 60000 });
          }

          await expect(page).toHaveURL(/\/accounts/, { timeout: 10000 });
          console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞');

          const tradeUrl = `https://app.upscale.stormtrade.dev/trade/${pair}?collateral=USD&tab=positions`;
          await page.goto(tradeUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
          console.log(`‚úÖ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pair} –¥–ª—è ${direction}`);

          const amountInput = page.locator('[data-testid="order-creation-card-asset-amount-input"]');
          await amountInput.waitFor({ timeout: 10000 });
          await amountInput.fill('10');
          console.log('üü¢ –í–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ 10');

          const slider = page.locator('[role="slider"]');
          await slider.waitFor({ timeout: 10000 });
          const min = await slider.getAttribute('aria-valuemin');
          const max = await slider.getAttribute('aria-valuemax');
          if (min !== '1' || max !== '5') {
            throw new Error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞: aria-valuemin=${min}, aria-valuemax=${max}`);
          }
          console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–ª–µ—á–∞: min=1, max=5');

          const leverageInput = page.locator('input[name="leverage"]:not([type="hidden"])');
          await leverageInput.waitFor({ timeout: 10000 });
          await leverageInput.click();
          await leverageInput.press('Control+A');
          await leverageInput.press('Backspace');
          await leverageInput.type('3', { delay: 100 });
          console.log('üü¢ –í–≤–µ–¥–µ–Ω–æ –ø–ª–µ—á–æ 3');

          const directionTab = page.locator('div.css-1i4hgyt', { hasText: direction });
          await directionTab.waitFor({ timeout: 10000 });
          await directionTab.click();
          console.log(`üü¢ –ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ ${direction}`);

          if (direction === 'Short') {
            const tabWrappers = page.locator('div.css-1lrd9y7[data-checked]');
            const allTexts = await tabWrappers.allTextContents();
            const found = allTexts.some(text => text.trim().toLowerCase().includes(direction.toLowerCase()));
            if (!found) {
              await page.screenshot({ path: `screenshots/tab-not-found-${pair}-${direction}.png` });
              throw new Error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ ${direction} –Ω–∞ –ø–∞—Ä–µ ${pair}`);
            }
            console.log(`‚úÖ –í–∫–ª–∞–¥–∫–∞ ${direction} –∞–∫—Ç–∏–≤–Ω–∞`);
          }

          const openButton = page.locator('[data-testid="open-position-button"]');
          await expect(openButton).toBeEnabled({ timeout: 10000 });
          await openButton.click();
          console.log(`üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ${direction}`);

          if (!['BTC_USD', 'ETH_USD', 'TON_USD'].includes(pair)) {
            const spread = page.locator('[data-testid="order-creation-card-price-impact"]');
            await spread.waitFor({ timeout: 5000 });
            const spreadText = await spread.innerText();
            const spreadValue = parseFloat(spreadText.replace(/[^\d.]/g, ''));
            console.log(`üìà –°–ø—Ä–µ–¥: ${spreadValue}`);
            if (isNaN(spreadValue)) {
              throw new Error(`‚ùå –°–ø—Ä–µ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –¥–ª—è ${pair} (${direction})`);
            } else if (spreadValue === 0) {
              console.warn(`‚ö†Ô∏è –°–ø—Ä–µ–¥ —Ä–∞–≤–µ–Ω –Ω—É–ª—é –¥–ª—è ${pair} (${direction})`);
            }
          }

          const fee = page.locator('span.css-1t1qvjl');
          await fee.waitFor({ timeout: 5000 });
          const feeValue = parseFloat((await fee.innerText()).replace(/[^\d.]/g, ''));
          console.log(`üí∞ –ö–æ–º–∏—Å—Å–∏—è: ${feeValue}`);
          if (isNaN(feeValue) || feeValue === 0) {
            throw new Error(`‚ùå –ö–æ–º–∏—Å—Å–∏—è —Ä–∞–≤–Ω–∞ 0 –¥–ª—è ${pair} (${direction})`);
          }

          const expectedFee = 0.002399;
          const tolerance = 0.000001;
          if (Math.abs(feeValue - expectedFee) > tolerance) {
            console.warn(`‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π. –û–∂–∏–¥–∞–ª–∞—Å—å: ${expectedFee}, –ø–æ–ª—É—á–µ–Ω–æ: ${feeValue}`);
          } else {
            console.log(`‚úÖ –ö–æ–º–∏—Å—Å–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: ${feeValue}`);
          }

          const entry = page.locator('[data-testid="order-creation-card-entry-price"]');
          await entry.waitFor({ timeout: 5000 });
          const entryValue = parseFloat((await entry.innerText()).replace(/[^\d.]/g, ''));
          console.log(`üéØ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entryValue}`);

          const liq = page.locator('[data-testid="order-creation-card-liquidation-price"]');
          await liq.waitFor({ timeout: 5000 });
          const liqValue = parseFloat((await liq.innerText()).replace(/[^\d.]/g, ''));
          console.log(`üí• –õ–∏–∫–≤–∏–¥–∞—Ü–∏—è: ${liqValue}`);

          const closeBtn = page.locator('button.chakra-button:has-text("Close")').first();
          await closeBtn.waitFor({ timeout: 10000 });
          await closeBtn.click();

          const modalInput = page.locator('[data-testid="close-position-modal-input-amount"]');
          await modalInput.waitFor({ timeout: 10000 });
          await expect(modalInput).not.toHaveValue('', { timeout: 5000 });
          const currentValue = parseFloat(await modalInput.inputValue());
          const half = (currentValue / 2).toFixed(8);
          await modalInput.fill(half);

          const modalClose = page.locator('[data-testid="close-position-modal-close-button"]');
          await expect(modalClose).toBeVisible({ timeout: 10000 });
          await expect(modalClose).toBeEnabled({ timeout: 10000 });
          await page.waitForTimeout(500);
          await modalClose.scrollIntoViewIfNeeded();
          await modalClose.hover();
          await modalClose.click();

          // üîÑ –£—Å—Ç–æ–π—á–∏–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏
          try {
            await expect(page.locator('section.chakra-modal__content')).toHaveCount(0, { timeout: 10000 });
          } catch {
            console.warn('‚ö†Ô∏è –ú–æ–¥–∞–ª–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –∫–ª–∏–∫–Ω—É—Ç—å');
            await modalClose.click();
            await expect(page.locator('section.chakra-modal__content')).toHaveCount(0, { timeout: 10000 });
          }

          console.log('‚úÖ –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∞');

          await closeBtn.click();
          const fullAmountBtn = page.locator('button:has-text("100%")');
          if (await fullAmountBtn.isVisible()) await fullAmountBtn.click();
          await modalClose.waitFor({ timeout: 10000 });
          await modalClose.click();
          console.log('‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç');

          await page.waitForTimeout(3000);

          const historyTab = page.locator('button[role="tab"][aria-controls*="tabpanel-2"]');
          await historyTab.waitFor({ timeout: 10000 });
          await historyTab.click();

          const directionCell = page.locator(`p.chakra-text.css-79wky:has-text("${direction}")`).first();
          await directionCell.waitFor({ state: 'attached', timeout: 20000 });
          const directionText = await directionCell.innerText();

          if (directionText.trim() !== direction) {
            throw new Error(`‚ùå –í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "${directionText.trim()}", –æ–∂–∏–¥–∞–ª–æ—Å—å "${direction}"`);
          }
          console.log(`‚úÖ –í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${direction}`);

          const statusBadge = page.locator('span.chakra-badge');
          const statusText = (await statusBadge.first().innerText()).trim().toLowerCase();
          if (statusText !== 'closed') {
            console.warn(`‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞. –°—Ç–∞—Ç—É—Å: ${statusText}`);
          } else {
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏: closed');
          }

          console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è ${pair} / ${direction}`);
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–µ ${pair} (${direction}):`, err);
          await page.screenshot({ path: `screenshots/error-${pair}-${direction}.png` });
          throw err;
        }
      });
    }
  }
});
